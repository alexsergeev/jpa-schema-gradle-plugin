{
  "name": "jpa-schema-gradle-plugin",
  "tagline": "Gradle plugin for generate database schema or DDL scripts from JPA entities",
  "body": "jpa-schema-gradle-plugin\r\n========================\r\n\r\n**Version 0.2.1**\r\n\r\nGradle plugin for generate schema or DDL scripts from JPA entities using [JPA 2.1](http://jcp.org/en/jsr/detail?id=338) schema generator.\r\nfor Maven, see [Maven Plugin](//github.com/divinespear/jpa-schema-maven-plugin).\r\n\r\nCurrently support [EclipseLink](http://www.eclipse.org/eclipselink) (Reference Implementation) and [Hibernate](http://hibernate.org).\r\n\r\n## Before Announce...\r\n\r\nREAD MY LIP; **JPA DDL GENERATOR IS NOT SILVER BULLET**\r\n\r\nSometimes (*most times* exactly :P) JPA will generate weird scripts so you **SHOULD** modify them properly.\r\n\r\n\r\n## Announce 0.2\r\n\r\nFinally, I got some times, and 0.2 is here.\r\n\r\n* Support generate without `persistence.xml` (like spring-data, spring-boot, ...) related [#14](//github.com/divinespear/jpa-schema-gradle-plugin/issues/14)\r\n* Add support DataNucleus\r\n* Changed default version of implementations.\r\n    * Eclipselink: `2.6.1`\r\n    * Hibernate: `5.0.11.Final`\r\n    * DataNucleus: `4.2.3`\r\n* Added `properties` property.\r\n* Removed properties `namingStrategy` and `dialect` cause Hibernate 4.x to 5.x is cataclysm. please use `properties` instead.\r\n\r\nOn 0.2.x, plugin minimal requires\r\n* [Java 1.7 or above](http://www.oracle.com/technetwork/java/javase/eol-135779.html), and\r\n* Gradle 2.x or above. (developed on Gradle 2.6)\r\n\r\nDataNucleus support is very very limited, and should so many buggy.\r\n\r\n## How-to Use\r\n\r\nfor Gradle 2.x or above, see [Gradle Plugins Registry](https://plugins.gradle.org/plugin/io.github.divinespear.jpa-schema-generate).\r\n\r\nPut this to your `build.gradle`\r\n\r\n```groovy\r\nbuildscript {\r\n    repositories {\r\n        mavenCentral()\r\n    }\r\n    dependencies {\r\n        classpath 'io.github.divinespear:jpa-schema-gradle-plugin:+'\r\n        // jdbc drivers also here\r\n        ...\r\n    }\r\n}\r\n\r\napply plugin: 'java'\r\napply plugin: 'jpa-schema-generate' // or 'io.github.divinespear.jpa-schema-generate'\r\n\r\nsourceSets {\r\n    main {\r\n    \t// set output to same directories\r\n    \t// jpa implementations always scan classes using classpath that found persistence.xml\r\n        output.resourcesDir = output.classesDir\r\n    }\r\n}\r\n\r\ngenerateSchema {\r\n\t// default options\r\n\t// see SchemaGenerationConfig to all options\r\n\t...\r\n\t// if you want multiple output\r\n\ttargets {\r\n\t\ttargetName {\r\n\t\t\t// same as default options\r\n\t\t\t...\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\nTo generate schema, run\r\n```\r\ngradle generateSchema\r\n```\r\nor\r\n```\r\n./gradlew generateSchema\r\n```\r\n\r\nsee also test cases `Generate*Spec.groovy`, as examples.\r\n\r\n#### change version of implementations\r\n\r\nYou can change version using `configurations` on `buildscript`, like:\r\n```groovy\r\nbuildscript {\r\n    ...\r\n    configurations.all {\r\n        resolutionStrategy.eachDependency { DependencyResolveDetails details ->\r\n            if (details.requested.group == 'org.hibernate') {\r\n                details.useVersion '4.3.11.Final'\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\nIt should useful if you using Hibernate with Spring Boot 1.3 or below.\r\n\r\n#### without `persistence.xml`\r\n\r\nYou **MUST** specify two options: `vendor` and `packageToScan`.\r\n```groovy\r\ngenerateSchema {\r\n    vendor = 'hibernate' // 'eclipselink', 'hibernate', or 'datanucleus'.\r\n                         // you can use class name too. (like 'org.hibernate.jpa.HibernatePersistenceProvider')\r\n    packageToScan = [ 'your.package.to.scan', ... ]\r\n    ...\r\n}\r\n```\r\n\r\n#### For Scala\r\n\r\nYou MUST put `scala-library` to `dependencies` of `buildscript`.\r\n\r\n```groovy\r\nbuildscript {\r\n    ...\r\n    dependencies {\r\n        ...\r\n        classpath \"org.scala-lang:scala-library:${your_scala_version}\"\r\n        ...\r\n    }\r\n}\r\n```\r\n\r\n#### For Hibernate\r\n\r\nHibernate **DOES NOT SUPPORT** `@GeneratedValue(strategy = GenerationType.SEQUENCE)` for DBMS dosen't support `CREATE/DROP SEQUENCE`. ~~WTF?!~~ You should use `@GeneratedValue` instead.\r\n\r\n#### For EclipseLink with Oracle\r\n\r\nEclipseLink's `Oracle{8,9,10,11}Platform` uses some type classes from Oracle's JDBC driver. you should have it in your dependency.\r\n\r\n#### For DataNucleus\r\n\r\nDataNucleus **DOES NOT SUPPORT** generate DDL without database connection.\r\n\r\n### SchemaGenerationConfig\r\n\r\nHere is full list of parameters of `generateSchema`.\r\n\r\n| name | type | description |\r\n| ---- | ---- | ---- |\r\n| `skip` | `boolean` | skip schema generation<p>default value is `false`.</p> |\r\n| `format` | `boolean` | generate as formatted<p>default value is `false`.</p> |\r\n| `scanTestClasses` | `boolean`| scan test classes<p>default value is `false`.</p> |\r\n| `persistenceXml` | `string` | location of `persistence.xml` file<p>Note: **Hibernate DOES NOT SUPPORT custom location.** (`SchemaExport` support it, but JPA 2.1 schema generator does NOT.)</p><p>default value is `META-INF/persistence.xml`.</p> |\r\n| `persistenceUnitName` | `string` | unit name of `persistence.xml`<p>default value is `default`.</p> |\r\n| `databaseAction` | `string` | schema generation action for database<p>support value is one of <ul><li>`none`</li><li>`create`</li><li>`drop`</li><li>`drop-and-create`</li><li>`create-or-extend-tables` (only for EclipseLink with database target)</li></ul></p><p>default value is `none`.</p> |\r\n| `scriptAction` | `string` | schema generation action for script<p>support value is one of <ul><li>`none`</li><li>`create`</li><li>`drop`</li><li>`drop-and-create`</li></ul></p><p>default value is `none`.</p> |\r\n| `outputDirectory` | `file` | output directory for generated ddl scripts<p>REQUIRED for `scriptAction` is one of `create`, `drop`, or `drop-and-create`.</p><p>default value is `${project.buildDir}/generated-schema`.</p> |\r\n| `createOutputFileName` | `string` | generated create script name<p>REQUIRED for `scriptAction` is one of `create`, or `drop-and-create`.</p><p>default value is `{targetName}-create.sql` if `targetName` presented, otherwise `create.sql`.</p> |\r\n| `dropOutputFileName` | `string` | generated drop script name<p>REQUIRED for `scriptAction` is one of `drop`, or `drop-and-create`.</p><p>default value is `{targetName}-drop.sql` if `targetName` presented, otherwise `drop.sql`.</p> |\r\n| `createSourceMode` | `string` | specifies whether the creation of database artifacts is to occur on the basis of the object/relational mappingmetadata, DDL script, or a combination of the two.<p>support value is one of <ul><li>`metadata`</li><li>`script`</li><li>`metadata-then-script`</li><li>`script-then-metadata`</li></ul></p><p>default value is `metadata`.</p> |\r\n| `createSourceFile` | `string` | create source file path.<p>REQUIRED for `createSourceMode` is one of `script`, `metadata-then-script`, or`script-then-metadata`.</p> |\r\n| `dropSourceMode` | `string` | specifies whether the dropping of database artifacts is to occur on the basis of the object/relational mappingmetadata, DDL script, or a combination of the two.<p>support value is one of <ul><li>`metadata`</li><li>`script`</li><li>`metadata-then-script`</li><li>`script-then-metadata`</li></ul></p><p>default value is `metadata`.</p> |\r\n| `dropSourceFile` | `file` | drop source file path.<p>REQUIRED for `dropSourceMode` is one of `script`, `metadata-then-script`, or`script-then-metadata`.</p> |\r\n| `jdbcDriver` | `string` | jdbc driver class name<p>default is declared class name in persistence xml.</p><p>and Remember, ~~[No Russian](http://callofduty.wikia.com/wiki/No_Russian)~~ you MUST configure jdbc driver to dependencies.</p> |\r\n| `jdbcUrl` | `string` | jdbc connection url<p>default is declared connection url in persistence xml.</p> |\r\n| `jdbcUser` | `string` | jdbc connection username<p>default is declared username in persistence xml.</p> |\r\n| `jdbcPassword` | `string` | jdbc connection password<p>default is declared password in persistence xml.</p><p>If your account has no password (especially local file-base, like Apache Derby, H2, etc...), it can be omitted.</p> |\r\n| `databaseProductName` | `string` | database product name for emulate database connection. this should useful for script-only action.<ul><li>specified if scripts are to be generated by the persistence provider and a connection to the target databaseis not supplied.</li><li>The value of this property should be the value returned for the target database by `DatabaseMetaData#getDatabaseProductName()`</li></ul> |\r\n| `databaseMajorVersion` | `int` | database major version for emulate database connection. this should useful for script-only action.<ul><li>specified if sufficient database version information is not included from `DatabaseMetaData#getDatabaseProductName()`</li><li>The value of this property should be the value returned for the target database by `DatabaseMetaData#getDatabaseMajorVersion()`</li></ul> |\r\n| `databaseMinorVersion` | `int` | database minor version for emulate database connection. this should useful for script-only action.<ul><li>specified if sufficient database version information is not included from `DatabaseMetaData#getDatabaseProductName()`</li><li>The value of this property should be the value returned for the target database by `DatabaseMetaData#getDatabaseMinorVersion()`</li></ul> |\r\n| `lineSeparator` | `string` | line separator for generated schema file.<p>support value is one of <code>CRLF</code> (windows default), <code>LF</code> (*nix, max osx), and <code>CR</code> (classic mac), in case-insensitive.</p><p>default value is system property <code>line.separator</code>. if JVM cannot detect <code>line.separator</code>, then use <code>LF</code> by <a href=\"http://git-scm.com/book/en/Customizing-Git-Git-Configuration\">git <code>core.autocrlf</code> handling</a>.</p> |\r\n| `properties` | `java.util.Map` | JPA vendor specific properties. |\r\n| `vendor` | `string` | JPA vendor name or class name of vendor's `PersistenceProvider` implemention.<p>vendor name is one of <ul><li>`eclipselink`(or `org.eclipse.persistence.jpa.PersistenceProvider`)</li><li>`hibernate` (or `org.hibernate.jpa.HibernatePersistenceProvider`)</li><li>`datanucleus` (or `org.datanucleus.api.jpa.PersistenceProviderImpl`)</li></ul></p><p>**REQUIRED for project without `persistence.xml`**</p> |\r\n| `packageToScan` | `java.util.List` | list of package name for scan entity classes<p>**REQUIRED for project without `persistence.xml`**</p> |\r\n\r\n#### How-to config `properties`\r\n\r\nIt's just groovy map, so you can config like this:\r\n```groovy\r\ngenerateSchema {\r\n    ...\r\n    // global properties\r\n    properties = [\r\n        'hibernate.dialect': 'org.hibernate.dialect.MySQL5InnoDBDialect',\r\n        ...\r\n    ]\r\n    // you can set target-specific too.\r\n    ...\r\n}\r\n```\r\n\r\n## Database Product Names\r\n\r\nIt's about `databaseProductName` property. If not listed below, will work as basic standard SQL.\r\n\r\n### for EclipseLink\r\n`databaseMajorVersion` and `databaseMinorVersion` is not required.\r\n\r\n* `Oracle12` = Oracle 12c\r\n* `Oracle11` = Oracle 11g\r\n* `Oracle10`: Oracle 10g\r\n* `Oracle9`: Oracle 9i\r\n* `Oracle`: Oracle with default compatibility\r\n* `Microsoft SQL Server`\r\n* `DB2`\r\n* `MySQL`\r\n* `PostgreSQL`\r\n* `SQL Anywhere`\r\n* `Sybase SQL Server`\r\n* `Adaptive Server Enterprise` = Sybase\r\n* `Pointbase`\r\n* `Informix Dynamic Server`\r\n* `Firebird`\r\n* `ingres`\r\n* `Apache Derby`\r\n* `H2`\r\n* `HSQL Database Engine`\r\n\r\n### for Hibernate\r\nSome products uses different dialect by `databaseMajorVersion` and/or `databaseMinorVersion`.\r\nYou can override using `hibernate.dialect` property.\r\n\r\n* `CUBRID`\r\n    * `org.hibernate.dialect.CUBRIDDialect` = all version\r\n* `HSQL Database Engine`\r\n    * `org.hibernate.dialect.HSQLDialect` = all version\r\n* `H2`\r\n    * `org.hibernate.dialect.H2Dialect` = all version\r\n* `MySQL`\r\n    * `org.hibernate.dialect.MySQL5Dialect` = 5.x\r\n    * `org.hibernate.dialect.MySQLDialect` = 4.x or below\r\n    * `org.hibernate.dialect.MySQLMyISAMDialect`\r\n    * `org.hibernate.dialect.MySQLInnoDBDialect`\r\n    * `org.hibernate.dialect.MySQL5InnoDBDialect`\r\n    * `org.hibernate.dialect.MySQL57InnoDBDialect`\r\n* `PostgreSQL`\r\n    * `org.hibernate.dialect.PostgreSQL94Dialect` = 9.4 or above\r\n    * `org.hibernate.dialect.PostgreSQL92Dialect` = 9.2 or above\r\n    * `org.hibernate.dialect.PostgreSQL9Dialect` = 9.x\r\n    * `org.hibernate.dialect.PostgreSQL82Dialect` = 8.2 or above\r\n    * `org.hibernate.dialect.PostgreSQL81Dialect` = 8.1 or below\r\n* `Apache Derby`\r\n    * `org.hibernate.dialect.DerbyTenSevenDialect` = 10.7 or above\r\n    * `org.hibernate.dialect.DerbyTenSixDialect` = 10.6\r\n    * `org.hibernate.dialect.DerbyTenFiveDialect` = 10.5\r\n    * `org.hibernate.dialect.DerbyDialect` = 10.4 or below\r\n* `ingres`\r\n    * `org.hibernate.dialect.Ingres10Dialect` = 10.x\r\n    * `org.hibernate.dialect.Ingres9Dialect` = 9.2 or above\r\n    * `org.hibernate.dialect.IngresDialect` = 9.1 or below\r\n* `Microsoft SQL Server`\r\n    * `org.hibernate.dialect.SQLServer2012Dialect` = 11.x\r\n    * `org.hibernate.dialect.SQLServer2008Dialect` = 10.x\r\n    * `org.hibernate.dialect.SQLServer2005Dialect` = 9.x\r\n    * `org.hibernate.dialect.SQLServerDialect` = 8.x or below\r\n* `Sybase SQL Server`\r\n    * `org.hibernate.dialect.SybaseASE15Dialect` = all version\r\n    * `org.hibernate.dialect.SybaseASE17Dialect`\r\n* `Adaptive Server Enterprise` = Sybase\r\n* `Adaptive Server Anywhere`\r\n    * `org.hibernate.dialect.SybaseAnywhereDialect` = all version\r\n* `Informix Dynamic Server`\r\n    * `org.hibernate.dialect.InformixDialect` = all version\r\n* ~~`DB2 UDB for AS/390`~~\r\n    * `org.hibernate.dialect.DB2390Dialect`\r\n* `DB2 UDB for AS/400`\r\n    * `org.hibernate.dialect.DB2400Dialect` = all version\r\n*  start with `DB2/`\r\n    * `org.hibernate.dialect.DB2Dialect` = all version\r\n* `Oracle`\r\n    * `org.hibernate.dialect.Oracle12cDialect` = 12.x\r\n    * `org.hibernate.dialect.Oracle10gDialect` = 11.x, 10.x\r\n    * `org.hibernate.dialect.Oracle9iDialect` = 9.x\r\n    * `org.hibernate.dialect.Oracle8iDialect` = 8.x or below\r\n* `Firebird`\r\n    * `org.hibernate.dialect.FirebirdDialect` = all version\r\n\r\n\r\n## License\r\n\r\nSource Copyright © 2013 Sin-young \"Divinespear\" Kang. Distributed under the [Apache License, Version 2.0](http://www.apache.org/licenses).\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}