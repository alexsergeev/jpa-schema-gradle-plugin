{"name":"jpa-schema-gradle-plugin","tagline":"Gradle plugin for generate database schema or DDL scripts from JPA entities","body":"jpa-schema-gradle-plugin\r\n========================\r\n\r\n[<img src=\"https://secure.travis-ci.org/divinespear/jpa-schema-gradle-plugin.png\" style=\"width: 77px; height: 19px\" />](http://travis-ci.org/divinespear/jpa-schema-gradle-plugin)\r\n\r\nGradle plugin for generate schema or DDL scripts from JPA entities using [JPA 2.1](http://jcp.org/en/jsr/detail?id=338) schema generator.\r\n\r\nCurrently support [EclipseLink](http://www.eclipse.org/eclipselink) (Reference Implementation) and [Hibernate](http://hibernate.org).\r\n\r\n\r\n## How-to Use\r\n\r\nPut this to your `build.gradle`\r\n\r\n```groovy\r\nbuildscript {\r\n    repositories {\r\n        mavenCentral()\r\n    }\r\n    dependencies {\r\n    \t// plugin dependencies\r\n        classpath \"org.eclipse.persistence:org.eclipse.persistence.jpa:2.5.0\"\r\n        classpath \"org.hibernate:hibernate-entitymanager:4.3.0.Beta3\"\r\n        // plugin\r\n        classpath \"io.github.divinespear:jpa-schema-gradle-plugin:0.1.0\"\r\n        // jdbc drivers also here\r\n        ...\r\n    }\r\n}\r\n\r\napply plugin: \"java\"\r\napply plugin: \"jpa-schema-generate\"\r\n\r\nsourceSets {\r\n    main {\r\n    \t// set output to same directories\r\n    \t// jpa implementations always scan classes using classpath that found persistence.xml\r\n        output.resourcesDir = output.classesDir\r\n    }\r\n}\r\n\r\ngenerateSchema {\r\n\t// default options\r\n\t// see SchemaGenerationConfig to all options\r\n\t...\r\n\t// if you want multiple output\r\n\ttargets {\r\n\t\ttargetName {\r\n\t\t\t// same as default options\r\n\t\t\t...\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\nTo generate schema, run\r\n```\r\ngradle generateSchema\r\n```\r\nor\r\n```\r\n./gradlew generateSchema\r\n```\r\n\r\n### SchemaGenerationConfig\r\n\r\nHere is full list of parameters of `generateSchema`.\r\n\r\n| name | type | description |\r\n| ---- | ---- | ---- |\r\n| `skip` | `boolean` | skip schema generation<p>default value is `false`.</p> |\r\n| `scanTestClasses` | `boolean`| scan test classes<p>default value is `false`.</p> |\r\n| `persistenceXml` | `string` | location of `persistence.xml` file<p>Note for Hibernate: **current version (4.3.0.beta3) DOES NOT SUPPORT custom location.** (`SchemaExport` support it, but JPA 2.1 schema generator does NOT.)</p><p>default value is `META-INF/persistence.xml`.</p> |\r\n| `persistenceUnitName` | `string` | unit name of `persistence.xml`<p>default value is `default`.</p> |\r\n| `databaseAction` | `string` | schema generation action for database<p>support value is one of <ul><li>`none`</li><li>`create`</li><li>`drop`</li><li>`drop-and-create`</li><li>`create-or-extend-tables` (only for EclipseLink with database target)</li></ul></p><p>default value is `none`.</p> |\r\n| `scriptAction` | `string` | schema generation action for script<p>support value is one of <ul><li>`none`</li><li>`create`</li><li>`drop`</li><li>`drop-and-create`</li></ul></p><p>default value is `none`.</p> |\r\n| `outputDirectory` | `file` | output directory for generated ddl scripts<p>REQUIRED for `scriptAction` is one of `create`, `drop`, or `drop-and-create`.</p><p>default value is `${project.buildDir}/generated-schema`.</p> |\r\n| `createOutputFileName` | `string` | generated create script name<p>REQUIRED for `scriptAction` is one of `create`, or `drop-and-create`.</p><p>default value is `create.sql`.</p> |\r\n| `dropOutputFileName` | `string` | generated drop script name<p>REQUIRED for `scriptAction` is one of `drop`, or `drop-and-create`.</p><p>default value is `drop.sql`.</p> |\r\n| `createSourceMode` | `string` | specifies whether the creation of database artifacts is to occur on the basis of the object/relational mappingmetadata, DDL script, or a combination of the two.<p>support value is one of <ul><li>`metadata`</li><li>`script`</li><li>`metadata-then-script`</li><li>`script-then-metadata`</li></ul></p><p>default value is `metadata`.</p> |\r\n| `createSourceFile` | `string` | create source file path.<p>REQUIRED for `createSourceMode` is one of `script`, `metadata-then-script`, or`script-then-metadata`.</p> |\r\n| `dropSourceMode` | `string` | specifies whether the dropping of database artifacts is to occur on the basis of the object/relational mappingmetadata, DDL script, or a combination of the two.<p>support value is one of <ul><li>`metadata`</li><li>`script`</li><li>`metadata-then-script`</li><li>`script-then-metadata`</li></ul></p><p>default value is `metadata`.</p> |\r\n| `dropSourceFile` | `file` | drop source file path.<p>REQUIRED for `dropSourceMode` is one of `script`, `metadata-then-script`, or`script-then-metadata`.</p> |\r\n| `jdbcDriver` | `string` | jdbc driver class name<p>default is declared class name in persistence xml.</p><p>and Remember, <strike>[No Russian](http://callofduty.wikia.com/wiki/No_Russian)</strike> you MUST configure jdbc driver to dependencies.</p> |\r\n| `jdbcUrl` | `string` | jdbc connection url<p>default is declared connection url in persistence xml.</p> |\r\n| `jdbcUser` | `string` | jdbc connection username<p>default is declared username in persistence xml.</p> |\r\n| `jdbcPassword` | `string` | jdbc connection password<p>default is declared password in persistence xml.</p><p>If your account has no password (especially local file-base, like Apache Derby, H2, etc...), it can be omitted.</p> |\r\n| `databaseProductName` | `string` | database product name for emulate database connection. this should useful for script-only action.<ul><li>specified if scripts are to be generated by the persistence provider and a connection to the target databaseis not supplied.</li><li>The value of this property should be the value returned for the target database by `DatabaseMetaData#getDatabaseProductName()`</li></ul> |\r\n| `databaseMajorVersion` | `int` | database major version for emulate database connection. this should useful for script-only action.<ul><li>specified if sufficient database version information is not included from `DatabaseMetaData#getDatabaseProductName()`</li><li>The value of this property should be the value returned for the target database by `DatabaseMetaData#getDatabaseMajorVersion()`</li></ul> |\r\n| `databaseMinorVersion` | `int` | database minor version for emulate database connection. this should useful for script-only action.<ul><li>specified if sufficient database version information is not included from `DatabaseMetaData#getDatabaseProductName()`</li><li>The value of this property should be the value returned for the target database by `DatabaseMetaData#getDatabaseMinorVersion()`</li></ul> |\r\n| `namingStrategy` | `string` | naming strategy that implements `org.hibernate.cfg.NamingStrategy`<p>this is Hibernate-only option.</p> |\r\n| `dialect` | `string` | dialect class<p>use this parameter if you want use custom dialect class. default is detect from JDBC connection or using `databaseProductName`, `databaseMajorVersion`, and `databaseMinorVersion`.</p><p>this is Hibernate-only option.</p> |\r\n\r\n\r\n## License\r\n\r\nSource Copyright Â© 2013 Sin-young \"Divinespear\" Kang. Distributed under the [Apache License, Version 2.0](http://www.apache.org/licenses).","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}