/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
plugins {
  id 'java-gradle-plugin'
  id 'com.gradle.plugin-publish' version '0.10.1'
  id 'groovy'
  id 'org.jetbrains.kotlin.jvm' version '1.3.61'
  //id 'maven-publish'
  //id 'signing'
}

group = "io.github.divinespear"
version = "0.4.0-SNAPSHOT"

sourceCompatibility = 1.8

ext {
  isReleaseVersion = !version.endsWith("-SNAPSHOT")
  // deploy
  deployRepo = isReleaseVersion ? "https://oss.sonatype.org/service/local/staging/deploy/maven2" : "https://oss.sonatype.org/content/repositories/snapshots"
  deployUserName = System.env["CI_DEPLOY_USERNAME"] ?: sonatypeDeployUserName
  deployPassword = System.env["CI_DEPLOY_PASSWORD"] ?: sonatypeDeployPassword
}

repositories {
  mavenCentral()
}

dependencies {
  api gradleApi()
  implementation localGroovy()
  testImplementation gradleTestKit()

  // java 9 missing module
  api 'javax.xml.bind:jaxb-api:2.3.0'
  // kotlin
  implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
  // jpa
  api 'org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.0.Final'
  // test
  implementation 'junit:junit:4.12'
  implementation 'org.hamcrest:hamcrest-all:1.3'
  implementation('com.netflix.nebula:nebula-test:6.3.0') {
    exclude module: 'junit-dep'
    exclude module: 'groovy-all'
  }
  implementation('org.spockframework:spock-core:1.1-groovy-2.4') {
    exclude group: 'org.codehaus.groovy'
  }
  testRuntimeOnly 'com.h2database:h2:1.4.191'
  testRuntimeOnly fileTree(dir: "lib", include: "*.jar")
}

test {
  systemProperty "pluginVersion", version

  testLogging.showStandardStreams = true

  // listen to events in the test execution lifecycle
  beforeTest { descriptor ->
    logger.lifecycle("Running test: " + descriptor)
  }
}

javadoc {
  if(JavaVersion.current().isJava9Compatible()) {
    options.addBooleanOption('html5', true)
  }
}
task javadocJar(type: Jar, dependsOn: javadoc) {
  archiveClassifier = 'javadoc'
  from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
  from sourceSets.main.allSource
  archiveClassifier = 'sources'
}

artifacts {
  archives jar
  archives javadocJar
  archives sourcesJar
}

/*

signing {
  required { isReleaseVersion }
  if (required) {
    sign publishing.publications.mavenJava
  }
}

publishing {
  repositories {
    maven {
      if (isReleaseVersion) {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
      }
      repository(url: deployRepo) {
        authentication(userName: deployUserName, password: deployPassword)
      }
    }
  }
  publications {
    mavenJava(MavenPublication) {
      pom {
        name = "jpa-schema-gradle-plugin"
        description = "Gradle plugin for generate database schema or DDL scripts from JPA entities"
        url = "http://divinespear.github.io/jpa-schema-gradle-plugin"
        packaging "jar"

        developers {
          developer {
            id = "divinespear"
            name = "Sin-young \"Divinespear\" Kang"
            email = "divinespear@gmail.com"
            timezone = "+9"
            url = "https://divinespear.github.io"
          }
        }

        licenses {
          license {
            name = "The Apache Software License, Version 2.0"
            url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
          }
        }

        scm {
          url = "https://github.com/divinespear/jpa-schema-gradle-plugin"
          connection = "scm:git:https://github.com/divinespear/jpa-schema-gradle-plugin.git"
          developerConnection = "scm:git:git@github.com:divinespear/jpa-schema-gradle-plugin.git"
        }

        issueManagement {
          system = "GitHub"
          url = "https://github.com/divinespear/jpa-schema-gradle-plugin/issues"
        }

        ciManagement {
          system = "Travis CI"
          url = "https://travis-ci.org/divinespear/jpa-schema-gradle-plugin"
        }
      }
    }
  }
}

[install.repositories.mavenInstaller, uploadArchives.repositories.mavenDeployer]*.pom*.whenConfigured { pom ->
  ['org.jetbrains.kotlin': '1.3.61'].each { entry ->
    pom.dependencies.findAll {
      it.groupId == entry.key
    }.each {
      it.version = entry.value
    }
  }
}
 */

gradlePlugin {
  plugins {
    generateSchema {
      id = 'io.github.divinespear.jpa-schema-generate'
      displayName = 'JPA 2.1 Schema Generation Plugin for Gradle'
      implementationClass = 'io.github.divinespear.plugin.JpaSchemaGenerationPlugin'
    }
  }
}

pluginBundle {
  website = 'https://divinespear.github.io/jpa-schema-gradle-plugin'
  vcsUrl = 'https://github.com/divinespear/jpa-schema-gradle-plugin'
  description = 'Gradle plugin for generate database schema or DDL scripts from JPA entities'
  tags = ['jpa', 'schema', 'schemagen', 'hibernate', 'eclipselink', 'generate']

  plugins {
    generateSchema {
      id = 'io.github.divinespear.jpa-schema-generate'
      displayName = 'JPA 2.1 Schema Generation Plugin for Gradle'
    }
  }
}
