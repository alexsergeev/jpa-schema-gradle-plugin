/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

apply plugin: "groovy"
apply plugin: "maven"
apply plugin: "signing"
apply plugin: "eclipse"

group = "io.github.divinespear"
version = "0.1.10"

ext.isReleaseVersion = !version.endsWith("-SNAPSHOT")
ext.version_eclipselink = "2.5.1"
ext.version_hibernate = "4.3.1.Final"

// deploy config
ext.deployRepo = isReleaseVersion ? "https://oss.sonatype.org/service/local/staging/deploy/maven2" : "https://oss.sonatype.org/content/repositories/snapshots"
ext.deployUserName = System.env["CI_DEPLOY_USERNAME"] ?: sonatypeDeployUserName
ext.deployPassword = System.env["CI_DEPLOY_PASSWORD"] ?: sonatypeDeployPassword

repositories {
    mavenCentral()
}

configurations {
    deployerJars

    // uses hamcrest-all
    all*.exclude module: "hamcrest-core"
}

dependencies {
    compile gradleApi()
    compile localGroovy()

    testCompile "junit:junit:4.+"
    testCompile "org.hamcrest:hamcrest-all:1.3"
    testCompile("org.spockframework:spock-core:0.7-groovy-1.8") {
        exclude module: "junit-dep"
        exclude module: "groovy-all"
    }
    testRuntime "com.h2database:h2:1.3.173"
    testRuntime fileTree(dir: "lib", include: "*.jar")

    // jpa
    compile "org.eclipse.persistence:org.eclipse.persistence.jpa:${version_eclipselink}"
    compile "org.eclipse.persistence:org.eclipse.persistence.oracle:${version_eclipselink}"
    compile("org.hibernate:hibernate-entitymanager:${version_hibernate}") {
        exclude group: "org.hibernate.javax.persistence"
    }

    // for jpa generation using spring-data
    runtime "org.springframework.data:spring-data-jpa:1.5.0.RELEASE"
    runtime "joda-time:joda-time:2.3"
    runtime "org.joda:joda-convert:1.6"

    // deploy
    deployerJars "org.apache.maven.wagon:wagon-http:2.2"
}

eclipse {
    classpath {
        defaultOutputDir = sourceSets.main.output.classesDir
        file {
            whenMerged { classpath ->
                classpath.entries.findAll { it.kind == "src" && it.path.endsWith("/resources") }*.excludes = ["unit/"]
                classpath.entries.findAll { it.kind == "src" && it.path.startsWith("src/test/") }*.output = relativePath(sourceSets.test.output.classesDir)
                classpath.entries.findAll { it.kind == "src" && it.path.endsWith("/main/resources") }*.output = relativePath(sourceSets.main.output.resourcesDir)
                classpath.entries.findAll { it.kind == "src" && it.path.endsWith("/test/resources") }*.output = relativePath(sourceSets.test.output.resourcesDir)
                classpath.entries.findAll { it.kind == "lib" }*.exported = false
            }
            withXml { provider ->
                provider.asNode().findAll {
                    it.@kind == "src" && it.@path.startsWith("build/generated-sources/")
                }.each { entry ->
                    def attrs = entry.appendNode "attributes"
                    attrs.appendNode "attribute", [name: "optional", value: true]
                }
            }
        }
    }
}

test {
    systemProperty "pluginVersion", version

    testLogging.showStandardStreams = true

    // listen to events in the test execution lifecycle
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

task groovydocJar(type: Jar, dependsOn: groovydoc) {
    classifier = 'groovydoc'
    from 'build/docs/groovydoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives jar
    archives javadocJar
    archives groovydocJar
    archives sourcesJar
}

signing {
    required { isReleaseVersion }
    if (required) {
        sign configurations.archives
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            configuration = configurations.deployerJars

            if (isReleaseVersion) {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
            }

            repository(url: deployRepo) {
                authentication(userName: deployUserName, password: deployPassword)
            }

            pom.project {
                name "jpa-schema-gradle-plugin"
                packaging "jar"
                description "Gradle plugin for generate database schema or DDL scripts from JPA entities"
                url "http://divinespear.github.io/jpa-schema-gradle-plugin"

                developers {
                    developer {
                        id "divinespear"
                        name "Sin-young \"Divinespear\" Kang"
                        email "divinespear@gmail.com"
                        timezone "+9"
                        url "http://divinespear.blogspot.com"
                    }
                }

                licenses {
                    license {
                        name "The Apache Software License, Version 2.0"
                        url "http://www.apache.org/licenses/LICENSE-2.0.txt"
                        distribution "repo"
                    }
                }

                scm {
                    url "https://github.com/divinespear/jpa-schema-gradle-plugin"
                    connection "scm:git:https://github.com/divinespear/jpa-schema-gradle-plugin.git"
                    developerConnection "scm:git:git@github.com:divinespear/jpa-schema-gradle-plugin.git"
                }

                issueManagement {
                    system "GitHub"
                    url "https://github.com/divinespear/jpa-schema-gradle-plugin/issues"
                }

                ciManagement {
                    system "Travis CI"
                    url "https://travis-ci.org/divinespear/jpa-schema-gradle-plugin"
                }
            }
        }
    }
}

task createDirs(description: "initialize project") << {
    sourceSets*.groovy.srcDirs*.each { it.mkdirs() }
    sourceSets*.resources.srcDirs*.each { it.mkdirs() }
}
