/*
 * This build file was auto generated by running the Gradle 'buildSetup' task
 * by 'divinespear' at '9/19/13 11:46 AM' with Gradle 1.7
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/1.7/userguide/tutorial_java_projects.html
 */

apply plugin: "groovy"
apply plugin: "maven"
apply plugin: "signing"
apply plugin: "eclipse"

group = "io.github.divinespear"
version = "0.1.0-SNAPSHOT"

ext.isReleaseVersion = !version.endsWith("-SNAPSHOT")

// deploy config
ext.deployRepo = isReleaseVersion ? "https://oss.sonatype.org/service/local/staging/deploy/maven2" : "https://oss.sonatype.org/content/repositories/snapshots"
ext.deployUserName = System.env["CI_DEPLOY_USERNAME"] ?: deployUserName
ext.deployPassword = System.env["CI_DEPLOY_PASSWORD"] ?: deployPassword

repositories {
    mavenCentral()
}

configurations {
    deployerJars
}

dependencies {
    compile gradleApi()
    compile "org.codehaus.groovy:groovy-all:2.1.7"

    // deploy
    deployerJars "org.apache.maven.wagon:wagon-http:2.2"
}

eclipse {
    classpath {
        defaultOutputDir = file("build/classes")
        file {
            whenMerged { classpath ->
                classpath.entries.findAll { it.kind == "src" && it.path.startsWith("src/test/") }*.output = "build/test-classes"
                classpath.entries.findAll { it.kind == "lib" }*.exported = false
            }
            withXml { provider ->
                provider.asNode().findAll {
                    it.@kind == "src" && it.@path.startsWith("build/generated-sources/")
                }.each { entry ->
                    def attrs = entry.appendNode "attributes"
                    attrs.appendNode "attribute", [name: "optional", value: true]
                }
            }
        }
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

signing {
    required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
    if (required) {
        sign configurations.archives   
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            configuration = configurations.deployerJars
            
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: deployRepo) {
                authentication(userName: deployUserName, password: deployPassword)
            }

            pom.project {
                name "jpa-schema-gradle-plugin"
                packaging "jar"
                description "Gradle plugin for generate database schema or DDL scripts from JPA entities"
                url "http://divinespear.github.io/jpa-schema-gradle-plugin"

                developers {
                    developer {
                        id "divinespear"
                        name "Sin-young \"Divinespear\" Kang"
                        email "divinespear@gmail.com"
                        timezone "+9"
                        url "http://divinespear.github.io"
                    }
                }

                licenses {
                    license {
                        name "The Apache Software License, Version 2.0"
                        url "http://www.apache.org/licenses/LICENSE-2.0.txt"
                        distribution "repo"
                    }
                }

                scm {
                    url "https://github.com/divinespear/jpa-schema-gradle-plugin"
                    connection "scm:git:https://github.com/divinespear/jpa-schema-gradle-plugin.git"
                    developerConnection "scm:git:git@github.com:divinespear/jpa-schema-gradle-plugin.git"
                }

                issueManagement {
                    system "GitHub"
                    url "https://github.com/divinespear/jpa-schema-gradle-plugin/issues"
                }

                ciManagement {
                    system "Travis CI"
                    url "https://travis-ci.org/divinespear/jpa-schema-gradle-plugin"
                }
           }
        }
    }
}

task createDirs(description: "initialize project") << {
    sourceSets*.java.srcDirs*.each { it.mkdirs() }
    sourceSets*.groovy.srcDirs*.each { it.mkdirs() }
    sourceSets*.resources.srcDirs*.each { it.mkdirs() }
}
