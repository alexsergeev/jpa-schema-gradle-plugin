/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
plugins {
  id 'java-gradle-plugin'
  id 'com.gradle.plugin-publish' version '0.9.10'
  id 'groovy'
  id 'org.jetbrains.kotlin.jvm' version '1.2.30'
  id 'maven'
  id 'signing'
}

group = "io.github.divinespear"
version = "0.3.0-SNAPSHOT"

sourceCompatibility = 1.7

ext {
  isReleaseVersion = !version.endsWith("-SNAPSHOT")
  // deploy
  deployRepo = isReleaseVersion ? "https://oss.sonatype.org/service/local/staging/deploy/maven2" : "https://oss.sonatype.org/content/repositories/snapshots"
  deployUserName = System.env["CI_DEPLOY_USERNAME"] ?: sonatypeDeployUserName
  deployPassword = System.env["CI_DEPLOY_PASSWORD"] ?: sonatypeDeployPassword
}

repositories {
  mavenCentral()
}

dependencies {
  compile localGroovy()
  compile gradleApi()
  testCompile gradleTestKit()

  // kotlin
  compile 'org.jetbrains.kotlin:kotlin-stdlib-jdk7'
  // jpa
  compile "org.eclipse.persistence:org.eclipse.persistence.jpa:${property('eclipselink.version')}"
  compile "org.eclipse.persistence:org.eclipse.persistence.oracle:${property('eclipselink.version')}"
  compile("org.hibernate:hibernate-entitymanager:${property('hibernate.version')}") {
    exclude group: 'org.hibernate.javax.persistence'
  }
  // spring-framework for without xml
  compile "org.springframework:spring-orm:${property('spring.version')}"
  compile "org.springframework:spring-context:${property('spring.version')}"
  compile "org.springframework:spring-aspects:${property('spring.version')}"
  // test
  testCompile 'junit:junit:4.12'
  testCompile 'org.hamcrest:hamcrest-all:1.3'
  testCompile('com.netflix.nebula:nebula-test:6.3.0') {
    exclude module: 'junit-dep'
    exclude module: 'groovy-all'
  }
  testCompile('org.spockframework:spock-core:1.1-groovy-2.4') {
    exclude group: 'org.codehaus.groovy'
  }
  testRuntime 'com.h2database:h2:1.4.191'
  testRuntime fileTree(dir: "lib", include: "*.jar")
}

test {
  systemProperty "pluginVersion", version

  testLogging.showStandardStreams = true

  // listen to events in the test execution lifecycle
  beforeTest { descriptor ->
    logger.lifecycle("Running test: " + descriptor)
  }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
  from sourceSets.main.allSource
  classifier = 'sources'
}

artifacts {
  archives jar
  archives javadocJar
  archives sourcesJar
}

signing {
  required { isReleaseVersion }
  if (required) {
    sign configurations.archives
  }
}

uploadArchives {
  repositories {
    mavenDeployer {
      if (isReleaseVersion) {
          beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
      }

      repository(url: deployRepo) {
          authentication(userName: deployUserName, password: deployPassword)
      }

      pom {
        project {
          name "jpa-schema-gradle-plugin"
          packaging "jar"
          description "Gradle plugin for generate database schema or DDL scripts from JPA entities"
          url "http://divinespear.github.io/jpa-schema-gradle-plugin"

          developers {
            developer {
              id "divinespear"
              name "Sin-young \"Divinespear\" Kang"
              email "divinespear@gmail.com"
              timezone "+9"
              url "http://divinespear.blogspot.com"
            }
          }

          licenses {
            license {
              name "The Apache Software License, Version 2.0"
              url "http://www.apache.org/licenses/LICENSE-2.0.txt"
              distribution "repo"
            }
          }

          scm {
            url "https://github.com/divinespear/jpa-schema-gradle-plugin"
            connection "scm:git:https://github.com/divinespear/jpa-schema-gradle-plugin.git"
            developerConnection "scm:git:git@github.com:divinespear/jpa-schema-gradle-plugin.git"
          }

          issueManagement {
            system "GitHub"
            url "https://github.com/divinespear/jpa-schema-gradle-plugin/issues"
          }

          ciManagement {
            system "Travis CI"
            url "https://travis-ci.org/divinespear/jpa-schema-gradle-plugin"
          }
        }
      }
    }
  }
}

gradlePlugin {
  plugins {
    generateSchema {
      id = 'io.github.divinespear.jpa-schema-generate'
      implementationClass = 'io.github.divinespear.plugin.JpaSchemaGenerationPlugin'
    }
  }
}

pluginBundle {
  website = 'http://divinespear.github.io/jpa-schema-gradle-plugin'
  vcsUrl = 'https://github.com/divinespear/jpa-schema-gradle-plugin'
  description = 'Gradle plugin for generate database schema or DDL scripts from JPA entities'
  tags = ['jpa', 'schema', 'schemagen', 'hibernate', 'eclipselink', 'datanucleus', 'generate']

  plugins {
    generateSchema {
      id = 'io.github.divinespear.jpa-schema-generate'
      displayName = 'JPA 2.1 Schema Generation Plugin for Gradle'
    }
  }
}
